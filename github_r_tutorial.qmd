---
title: "Usando GitHub com R e RStudio"
description: "Aprenda a integrar GitHub e RStudio para versionamento de projetos de an√°lise de dados."
author:
  - name: Alessandra Menezes
    email: aasmenezes@unifesp.br
    affiliations:
      - name: Universidade Federal de S√£o Paulo (UNIFESP) 
        url: https://unifesp.br/
date: today
lang: pt
toc: true
toc-location: left
toc-title: Conte√∫do
number-sections: false
highlight-style: pygments
format: 
  html:
    code-fold: true
    code-tools: true
    code-link: true
    df-print: kable
    embed-resources: true
    include-in-header: "include/open_links.html"
theme:
  light: flatly
  dark: darkly
---

# üöÄ Introdu√ß√£o

Bem-vindo! Este tutorial foi feito para quem **nunca usou Git ou GitHub**, especialmente no contexto de **ci√™ncia de dados com R**. 

# üéØ O que voc√™ vai aprender

-   O que s√£o Git e GitHub e por que us√°-los;
-   Como instalar e configurar o ambiente de trabalho no RStudio;
-   Como criar projetos no GitHub e no RStudio;
-   Como salvar e compartilhar seu trabalho usando versionamento.

------------------------------------------------------------------------

# üß† Entendendo o Git e o GitHub

## üì¶ O que √© Git?

Git √© como uma **m√°quina do tempo** para o seu projeto. Ele salva vers√µes do seu c√≥digo, permitindo que voc√™ volte atr√°s, colabore e mantenha tudo organizado.

![Git logo](https://git-scm.com/images/logos/downloads/Git-Icon-1788C.png){fig-align="center" width="120"}

## ‚òÅÔ∏è O que √© GitHub?

GitHub √© uma **plataforma online** que guarda seus projetos Git e permite que voc√™ trabalhe com outras pessoas.

![GitHub logo](https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png){fig-align="center" width="120"}

------------------------------------------------------------------------

# üß∞ Configurando o ambiente

1. Fa√ßa o [download conforme seu sistema operacional](https://git-scm.com/downloads) e siga as [instru√ß√µes de instala√ß√£o](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
2. Depois, v√° at√© o menu: `Tools > Global Options > Git/SVN`.
3. Se o campo **Git executable** estiver vazio ou com erro, ser√° necess√°rio configurar o caminho do execut√°vel do Git.
4. Localize o caminho correto e preencha o campo **Git executable**:
    - **Windows:** `C:/Program Files/Git/bin/git.exe`; ou
    - **MacOS/Linux:** `/usr/bin/git` (em geral).
5.  Clique em **OK** para salvar as configura√ß√µes.
6.  Abra o terminal do RStudio e configure seu nome e email do Git:

    ``` bash
    git config --global user.name "Seu Nome"
    git config --global user.email "email@example.com"
    ```
7. Depois, crie um projeto com controle de vers√£o no RStudio .
8. Abrir√° um novo terminal integrado do RStudio (`Tools > Terminal > New Terminal`), no qual ficar√£o visiveis dois elemento visuais: o menu suspenso "Git/Controle" de vers√£o e a guia "Git/Controle de vers√£o".

![Elementos visuais relacionados ao Git](https://docs.posit.co/ide/user/ide/guide/tools/images/rstudio-vcs-pane-labeled.png){fig-align="center"}

------------------------------------------------------------------------

# üìò Conceitos fundamentais

1.  **Reposit√≥rio**: pasta do projeto com controle de vers√£o. Pode ser local (no seu computador) ou remoto (no GitHub).
2.  **Clone**: copiar um reposit√≥rio do GitHub para a pasta de trabalho local
   no RStudio. Isso cria uma c√≥pia local do reposit√≥rio remoto.
3.  **Fork**: criar uma c√≥pia de um reposit√≥rio para a sua conta, sem modificar o original.
   √ötil para contribuir com projetos de outras pessoas, pois permite criar pull requests para sugerir mudan√ßas ao original.
4.  **Commit**: um registro de altera√ß√µes. √â como tirar uma foto do estado atual do projeto. Cada commit deve ter uma mensagem descritiva.
5.  **Push**: enviar altera√ß√µes para o GitHub a partir do RStudio. Isso atualiza o reposit√≥rio remoto com as altera√ß√µes feitas localmente.
6.  **Pull**: baixar altera√ß√µes do GitHub para o RStudio. Isso atualiza o reposit√≥rio local com as altera√ß√µes feitas remotamente.

![Fluxo de trabalho entre GitHub e projeto local no RStudio](figuras/fluxograma.png){fig-align="center"}

------------------------------------------------------------------------

# üîó Conectando o GitHub ao RStudio

## No GitHub

1. Crie um novo reposit√≥rio e d√™ um nome significativo, que identifique a natureza do projeto.
2. Marque a op√ß√£o "Add a README". Isso cria um arquivo README.md para descrever o projeto.
3. Escolha a licen√ßa (opcional, mas recomendado).
4. Clique em "Create repository".

## No RStudio

1. Crie um novo projeto de controle de vers√£o: `File > New Project > Version Control > Git`.
2. Cole a URL do reposit√≥rio criado no GitHub.
3. Clone o projeto localmente:
    - Selecione a pasta onde o projeto ser√° salvo.
    - Marque a op√ß√£o "Create a git repository".
4. Escolha o diret√≥rio onde o projeto ser√° salvo.
5. Clique em "Create Project". Isso cria um novo projeto RStudio vinculado ao reposit√≥rio GitHub.

------------------------------------------------------------------------

# ‚úçÔ∏è Trabalhando com Git no RStudio

1. Trabalhe no projeto, adicionando arquivos, fazendo an√°lises.
2. Depois v√° para a aba "Git". Voc√™ ver√° os arquivos modificados, novos arquivos e arquivos deletados.
3. Selecione os arquivos que deseja incluir no commit.
4. Clique em "Commit" para abrir a janela de commit.
5. Adicione uma mensagem de commit descritiva.
6. Clique em "Commit" para registrar as altera√ß√µes localmente.
7. Para enviar as altera√ß√µes para o GitHub, clique em "Push".
8. Para baixar as altera√ß√µes do GitHub, clique em "Pull".

------------------------------------------------------------------------

# üß™ Atividade Pr√°tica

Voc√™ vai clonar o reposit√≥rio desse tutorial e fazer algumas modifica√ß√µes:

1.  Clone o reposit√≥rio [tutorial GitHub](https://github.com/AASMenezes/aula_github_basico).
2.  Crie um arquivo `resumo.R` com o c√≥digo:

``` r
summary(iris)
```
3.  Salve o arquivo `resumo.R` no diret√≥rio do reposit√≥rio clonado.
4. V√° para a aba "Git" no RStudio, voc√™ ver√° o arquivo `resumo.R` listado como modificado.
5. Selecione o arquivo `resumo.R` e clique em "Commit".
6. Escreva uma mensagem de commit, como "Adiciona resumo da base iris".
7. Clique em "Commit" para registrar as altera√ß√µes localmente.
8. Clique em "Push" para enviar as altera√ß√µes para o GitHub.
9. Verifique no GitHub se o arquivo `resumo.R` foi adicionado corretamente.

------------------------------------------------------------------------

# üß† Dicas e boas pr√°ticas

- Sempre trabalhe em um reposit√≥rio clonado localmente;
- Sempre fa√ßa commits frequentes e significativos;
- Use mensagens de commit claras e descritivas;
- Mantenha o reposit√≥rio organizado com pastas para scripts, dados e resultados;
- Sempre fa√ßa pull antes de come√ßar a trabalhar para evitar conflitos;
- Use o arquivo `.gitignore` para excluir arquivos tempor√°rios ou desnecess√°rios do controle de vers√£o;
- Mantenha o README atualizado com informa√ß√µes sobre o projeto, como instala√ß√£o, uso e contribui√ß√µes.

------------------------------------------------------------------------

# üìö Para saber mais!

- üìò [Happy Git with R](https://happygitwithr.com/)
- üß∞ [Git Documentation](https://git-scm.com/doc)
- üìñ [Pro Git](https://git-scm.com/book/en/v2)
- üìö [GitHub Guides](https://guides.github.com/)
- üß∞ [RStudio User Guide - Version Control with Git and GitHub](https://docs.posit.co/ide/user/ide/guide/tools/version-control.html)
- üìö [GitHub Education](https://github.com/education)
